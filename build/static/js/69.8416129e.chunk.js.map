{"version":3,"sources":["actions/docsActions.js","components/docs/DocsPage.js","components/docs/DocsContainer.js"],"names":["getDocsByType","type","dispatch","types","ajax","url","config","BASE_URL","applyAuthHeader","success","response","status","tokenExpired","data","DocsPage","state","downloading","downloadFile","doc","a","setState","_link","link","filename","fileName","documentitle","title","trim","stripTrailingQuery","window","isNativeApp","ReactNativeWebView","postMessage","JSON","stringify","action","canShareUrl","open","console","error","alert","handleWindowMessage","e","message","warn","addEventListener","this","removeEventListener","className","props","docs","length","map","index","key","src","docType","icon","width","height","alt","onClick","isOpen","ariaHideApp","contentLabel","shouldCloseOnOverlayClick","React","Component","docTypesList","id","value","DocsContainer","navActions","updateNavTitle","getDocs","prevProps","prevState","match","params","find","d","actions","loading","connect","bindActionCreators","docsActions","navigationTitleActions"],"mappings":"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","file":"static/js/69.8416129e.chunk.js","sourcesContent":["import * as types from \"./actionTypes\";\nimport config from \"../config\";\nimport { ajax } from \"../lib\";\nimport { tokenExpired } from \"./authenticationActions\";\n\nexport function getDocsByType(type) {\n  return (dispatch) => {\n    dispatch({ type: types.LOADING_DOCS_BY_TYPE });\n    ajax({\n      url: `${config.BASE_URL}docs`,\n      applyAuthHeader: true,\n      success: function (response) {\n        switch (response.status) {\n          case \"E403\":\n            dispatch(tokenExpired());\n            break;\n          case \"200\":\n            dispatch({\n              type: types.GET_DOCS_BY_TYPE,\n              data: response.data[type],\n            });\n            break;\n          default:\n            dispatch({ type: types.GET_DOCS_BY_TYPE, data: [] });\n            break;\n        }\n      },\n    });\n  };\n}\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport { ajax } from \"../../lib\";\nimport { stripTrailingQuery } from \"../../lib/routing\";\n\nclass DocsPage extends React.Component {\n  state = {\n    downloading: false,\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"message\", this.handleWindowMessage, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"message\", this.handleWindowMessage);\n  }\n\n  downloadFile = async (doc) => {\n    try {\n      if (this.state.downloading) {\n        return;\n      }\n      this.setState({ downloading: true });\n      let {\n        link: _link,\n        filename: fileName = \"\",\n        documentitle: title = \"\",\n      } = doc;\n      fileName = fileName.trim();\n      title = title.trim();\n      // NOTE: Adding title since many of the Docs filenames are just numbers.\n      if (title) {\n        fileName = `${title}_${fileName}`;\n      }\n      // data can sometimes be returned with a trailing '?'\n      const link = stripTrailingQuery(_link);\n      const response = await ajax({\n        url: `${link}?getSignedUrl=1`,\n        applyAuthHeader: true,\n      });\n      const url = response?.data?.url || \"\";\n      if (window && window.isNativeApp) {\n        window.ReactNativeWebView.postMessage(\n          JSON.stringify({\n            action: window.canShareUrl ? \"shareUrl\" : \"openUrl\",\n            data: { url, fileName },\n          })\n        );\n      } else {\n        this.setState({ downloading: false });\n        window.open(url);\n      }\n    } catch (ex) {\n      console.error(ex);\n      alert(\"Sorry! There was an error downloading that document.\");\n      this.setState({ downloading: false });\n    }\n  };\n\n  handleWindowMessage = (e) => {\n    const message = e.data;\n    if (!message || message === \"undefined\") {\n      // This happens for messages sent by the OS, SDK, React-Native, Expo or\n      // some other code outside our control. No need to log it.\n      return;\n    }\n    const { action, /* data, */ error } = message;\n    if (!action) {\n      if (error) {\n        // TODO: Report to Sentry.\n        console.warn(\"ACTION_ERROR\", action, error);\n      }\n      return;\n    }\n    if (action === \"shareUrl\") {\n      this.setState({ downloading: false });\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"docs-outer-container\">\n        <div className=\"docs-list docs-container\">\n          {this.props.docs && this.props.docs.length ? (\n            this.props.docs.map((doc, index) => (\n              <div key={index} className=\"docs-row\">\n                <div className=\"docs-row-icon\">\n                  <img\n                    src={`/images/icons/${this.props.docType.icon}`}\n                    width=\"16\"\n                    height=\"16\"\n                    alt=\"doc\"\n                  />\n                </div>\n                <div className=\"docs-row-title\">{doc.documentitle}</div>\n                <div\n                  className=\"docs-row-download\"\n                  onClick={() => this.downloadFile(doc)}\n                >\n                  <i className=\"material-icons doc-download-icon\">\n                    {window && window.canShareUrl ? \"share\" : \"file_download\"}\n                  </i>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div>\n              <div className=\"grey-circle\">\n                <i className=\"material-icons\">warning</i>\n              </div>\n              <h2 className=\"no-results\">No Docs</h2>\n            </div>\n          )}\n        </div>\n        <Modal\n          className=\"loading-modal\"\n          isOpen={this.state.downloading}\n          ariaHideApp={false}\n          contentLabel=\"Modal\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <div className=\"centered-spinner\">\n            <img\n              src=\"/images/icons/spin.svg\"\n              className=\"loading-spinner\"\n              alt=\"loading spinner\"\n            />\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default DocsPage;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as docsActions from \"../../actions/docsActions\";\nimport * as navigationTitleActions from \"../../actions/navigationTitleActions\";\nimport Modal from \"react-modal\";\nimport DocsPage from \"./DocsPage\";\n\nconst docTypesList = [\n  { id: 2, value: \"setup\", icon: \"docs-setup.png\" },\n  { id: 3, value: \"brokerage\", icon: \"docs-brokerage.png\" },\n  { id: 4, value: \"marketing\", icon: \"docs-marketing.png\" },\n  { id: 5, value: \"misc\", icon: \"docs-misc.png\" },\n  { id: 8, value: \"email-templates\", icon: \"docs-email.png\" },\n];\n\nclass DocsContainer extends React.Component {\n  state = {\n    docType: {},\n  };\n\n  componentDidMount() {\n    this.props.navActions.updateNavTitle(\"Documents\");\n    this.getDocs();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.match.params.type !== prevProps.match.params.type) {\n      this.getDocs();\n    }\n  }\n\n  getDocs() {\n    let docType = docTypesList.find(\n      (d) => d.value === this.props.match.params.type\n    );\n    this.setState({ docType }, () =>\n      this.props.actions.getDocsByType(docType ? docType.id : null)\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.docs.loading ? (\n          <DocsPage docs={this.props.docs.data} docType={this.state.docType} />\n        ) : (\n          <Modal\n            className=\"loading-modal\"\n            isOpen={true}\n            ariaHideApp={false}\n            contentLabel=\"Modal\"\n            shouldCloseOnOverlayClick={false}\n          >\n            <div className=\"centered-spinner\">\n              <img\n                src=\"/images/icons/spin.svg\"\n                className=\"loading-spinner\"\n                alt=\"loading spinner\"\n              />\n            </div>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    docs: state.docs,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(docsActions, dispatch),\n    navActions: bindActionCreators(navigationTitleActions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DocsContainer);\n"],"sourceRoot":""}
{"version":3,"sources":["components/dealDetails/FundQuote.js","components/dealDetails/FundQuotesPage.js","components/dealDetails/FundQuotesContainer.js"],"names":["FundQuote","props","quote","tiers","sort","a","b","sort_order","className","style","flex","fund","fund_name","is_awarded","src","alt","id","background","status","color","text","md","investor","full_name","formatDate","quoted_at","formatCurrency","quoted_amount","minimum_expected_return","equity_type","formatPercentage","percent_of_ownership","preferred_irr","ltv","ltc","pref_rate","minimum_payout","origination_fee","exit_fee","investor_asset_mgmt_fee","term","sponsor_acquisition_fee","sponsor_property_mgmt_fee","sponsor_asset_mgmt_fee","sponsor_construction_mgmt_fee","map","tier","index","waterfallType","waterfallTypesList","find","t","list_type_id","waterfall_type","value","key","priority","hurdle_multiple","promote","latest_note","FundQuotesPage","parseInt","this","statusList","s","loading","length","fundQuotes","getStatus","shouldCloseOnOverlayClick","ariaHideApp","contentLabel","isOpen","React","Component","FundQuotesContainer","actions","loadFundQuotes","match","params","dealId","getEquityQuoteStatusList","getWaterfallTypesList","dealDetails","data","nextPageUrl","equityQuoteStatusList","connect","state","dispatch","bindActionCreators","dealDetailsActions"],"mappings":"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","file":"static/js/64.2df10df5.chunk.js","sourcesContent":["import React from \"react\";\nimport Row from \"muicss/lib/react/row\";\nimport Col from \"muicss/lib/react/col\";\nimport { formatDate, formatCurrency, formatPercentage } from \"../../lib\";\nimport Divider from \"muicss/lib/react/divider\";\n\nconst FundQuote = (props) => {\n  let quote = props.quote;\n  quote.tiers = quote.tiers.sort(function (a, b) {\n    return a.sort_order - b.sort_order;\n  });\n  return (\n    <div className=\"bank-quote fund-quote\">\n      <div className=\"panel mui-panel\">\n        <Row className=\"panel-heading flex flex-space-justify\">\n          <div style={{ flex: \"1\" }}>\n            <b className=\"bank-quote-title\">{quote.fund.fund_name}</b>\n            {quote.is_awarded ? (\n              <img\n                src={\"/images/icons/badge.png\"}\n                alt=\"badge\"\n                className=\"img-responsive\"\n                id=\"badge-icon\"\n              />\n            ) : (\n              \"\"\n            )}\n          </div>\n          <div>\n            <span\n              className=\"deal-tag\"\n              style={{ background: props.status.color }}\n            >\n              {props.status.text}\n            </span>\n          </div>\n        </Row>\n        <div className=\"panel-body\">\n          <Row className=\"mb-16\">\n            <Col md=\"12\">\n              <Col md=\"3\">\n                <p className=\"small-title panel-info-title\">Contact</p>\n                <p className=\"large-text panel-info-value\">\n                  {quote.investor ? quote.investor.full_name : \"-\"}\n                </p>\n              </Col>\n              <Col md=\"3\">\n                <p className=\"small-title panel-info-title\">Quoted Date</p>\n                <p className=\"large-text panel-info-value\">\n                  {formatDate(quote.quoted_at, \"-\")}\n                </p>\n              </Col>\n              <Col md=\"3\">\n                <p className=\"small-title panel-info-title\">Quoted Amount</p>\n                <p className=\"large-text panel-info-value\">\n                  {formatCurrency(quote.quoted_amount, 0, \"-\")}\n                </p>\n              </Col>\n              <Col md=\"3\">\n                <p className=\"small-title panel-info-title\">Minimum Multiple</p>\n                <p className=\"large-text panel-info-value\">\n                  {quote.minimum_expected_return || \"-\"}\n                </p>\n              </Col>\n            </Col>\n          </Row>\n          <Row>\n            <Col md=\"12\">\n              {quote.equity_type === \"JV\" ? (\n                <div>\n                  <Col md=\"3\">\n                    <p className=\"small-title panel-info-title\">\n                      Percent of Equity\n                    </p>\n                    <p className=\"large-text panel-info-value\">\n                      {formatPercentage(quote.percent_of_ownership, \"-\")}\n                    </p>\n                  </Col>\n                  <Col md=\"3\">\n                    <p className=\"small-title panel-info-title\">\n                      Preferred Return (IRR)\n                    </p>\n                    <p className=\"large-text panel-info-value\">\n                      {formatPercentage(quote.preferred_irr, \"-\")}\n                    </p>\n                  </Col>\n                </div>\n              ) : (\n                <div>\n                  <Col md=\"3\">\n                    <p className=\"small-title panel-info-title\">LTV/LTC</p>\n                    <p className=\"large-text panel-info-value\">\n                      {formatPercentage(quote.ltv)} /{\" \"}\n                      {formatPercentage(quote.ltc)}\n                    </p>\n                  </Col>\n                  <Col md=\"3\">\n                    <p className=\"small-title panel-info-title\">Pref Rate</p>\n                    <p className=\"large-text panel-info-value\">\n                      {formatPercentage(quote.pref_rate, \"-\")}\n                    </p>\n                  </Col>\n                  <Col md=\"3\">\n                    <p className=\"small-title panel-info-title\">\n                      Minimum Current Pay\n                    </p>\n                    <p className=\"large-text panel-info-value\">\n                      {formatPercentage(quote.minimum_payout, \"-\")}\n                    </p>\n                  </Col>\n                </div>\n              )}\n            </Col>\n          </Row>\n\n          <Row>\n            <Row>\n              <p className=\"title panel-info-title\">Investor Fees</p>\n            </Row>\n            <Row>\n              <Col md=\"12\">\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">\n                    Origination Fee\n                  </p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.origination_fee, \"-\")}\n                  </p>\n                </Col>\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">Exit Fee</p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.exit_fee, \"-\")}\n                  </p>\n                </Col>\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">AM Fee</p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.investor_asset_mgmt_fee, \"-\")}\n                  </p>\n                </Col>\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">Term</p>\n                  <p className=\"large-text panel-info-value\">{quote.term}</p>\n                </Col>\n              </Col>\n            </Row>\n          </Row>\n\n          <Row>\n            <Row>\n              <p className=\"title panel-info-title\">Sponsor Fees</p>\n            </Row>\n            <Row>\n              <Col md=\"12\">\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">ACQ Fee</p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.sponsor_acquisition_fee, \"-\")}\n                  </p>\n                </Col>\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">PM Fee</p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.sponsor_property_mgmt_fee, \"-\")}\n                  </p>\n                </Col>\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">AM Fee</p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.sponsor_asset_mgmt_fee, \"-\")}\n                  </p>\n                </Col>\n                <Col md=\"3\">\n                  <p className=\"small-title panel-info-title\">CM Fee</p>\n                  <p className=\"large-text panel-info-value\">\n                    {formatPercentage(quote.sponsor_construction_mgmt_fee, \"-\")}\n                  </p>\n                </Col>\n              </Col>\n            </Row>\n          </Row>\n\n          {quote.equity_type === \"JV\"\n            ? quote.tiers.map((tier, index) => {\n                let waterfallType = props.waterfallTypesList.find(\n                  (t) => t.list_type_id === tier.waterfall_type\n                );\n                waterfallType = waterfallType ? waterfallType.value : \"\";\n                return (\n                  <Row key={index}>\n                    <Row>\n                      <p className=\"title panel-info-title\">Tier {index + 1}</p>\n                    </Row>\n                    <Row>\n                      <Col md=\"12\">\n                        <Col md=\"3\">\n                          <p className=\"small-title panel-info-title\">\n                            Waterfall Type\n                          </p>\n                          <p className=\"large-text panel-info-value\">\n                            {waterfallType}\n                          </p>\n                        </Col>\n                        <Col md=\"3\">\n                          <p className=\"small-title panel-info-title\">\n                            Priority to Investor\n                          </p>\n                          <p className=\"large-text panel-info-value\">\n                            {tier.priority ? \"Yes\" : \"No\"}\n                          </p>\n                        </Col>\n                        <Col md=\"3\">\n                          <p className=\"small-title panel-info-title\">Hurdle</p>\n                          <p className=\"large-text panel-info-value\">\n                            {formatPercentage(tier.hurdle_multiple, \"-\")}\n                          </p>\n                        </Col>\n                        <Col md=\"3\">\n                          <p className=\"small-title panel-info-title\">\n                            Promote\n                          </p>\n                          <p className=\"large-text panel-info-value\">\n                            {formatPercentage(tier.promote, \"-\")}\n                          </p>\n                        </Col>\n                      </Col>\n                    </Row>\n                  </Row>\n                );\n              })\n            : \"\"}\n\n          {quote.latest_note ? (\n            <div>\n              <Divider />\n              <Row className=\"note-container\">\n                <Col md=\"10\">\n                  <p className=\"small-title deal-info-title\">Last Note</p>\n                  <div>\n                    <p className=\"note\">{quote.latest_note}</p>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FundQuote;\n","import React from \"react\";\nimport FundQuote from \"./FundQuote\";\nimport Modal from \"react-modal\";\n\nclass FundQuotesPage extends React.Component {\n  getStatus(value) {\n    value = parseInt(value, 10);\n    let color = null;\n    let text = this.props.statusList.find((s) => s.list_type_id === value)\n      .value;\n\n    if (value === 1) {\n      color = \"blue\";\n    } else if (value === 2 || value === 7) {\n      color = \"orange\";\n    } else if (value === 3 || value === 5) {\n      color = \"green\";\n    } else if (value === 4) {\n      color = \"purple\";\n    } else if (value === 6 || value === 8 || value === 10) {\n      color = \"yellow\";\n    } else if (value === 9) {\n      color = \"red\";\n    }\n\n    return { text, color };\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.loading &&\n        this.props.statusList.length &&\n        this.props.waterfallTypesList.length ? (\n          <div>\n            {this.props.fundQuotes.length ? (\n              this.props.fundQuotes.map((quote, index) => (\n                <FundQuote\n                  key={index}\n                  quote={quote}\n                  status={this.getStatus(quote.status)}\n                  waterfallTypesList={this.props.waterfallTypesList}\n                />\n              ))\n            ) : (\n              <div>\n                <div className=\"grey-circle\">\n                  <i className=\"material-icons\">warning</i>\n                </div>\n                <h2 className=\"no-results\">This deal has no fund quotes</h2>\n              </div>\n            )}\n          </div>\n        ) : (\n          <Modal\n            className=\"loading-modal\"\n            shouldCloseOnOverlayClick={false}\n            ariaHideApp={false}\n            contentLabel=\"modal\"\n            isOpen={true}\n          >\n            <div className=\"centered-spinner\">\n              <img\n                src=\"/images/icons/spin.svg\"\n                className=\"loading-spinner\"\n                alt=\"loading spinner\"\n              />\n            </div>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default FundQuotesPage;\n","import React from \"react\";\nimport * as dealDetailsActions from \"../../actions/dealDetailsActions\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport FundQuotesPage from \"./FundQuotesPage\";\n\nclass FundQuotesContainer extends React.Component {\n  UNSAFE_componentWillMount() {\n    this.props.actions.loadFundQuotes(this.props.match.params.dealId);\n    this.props.actions.getEquityQuoteStatusList();\n    this.props.actions.getWaterfallTypesList();\n  }\n\n  render() {\n    return (\n      <div>\n        <FundQuotesPage\n          loading={this.props.dealDetails.loading}\n          fundQuotes={this.props.dealDetails.fundQuotes.data}\n          nextPageUrl={this.props.dealDetails.fundQuotes.nextPageUrl}\n          statusList={this.props.dealDetails.equityQuoteStatusList}\n          waterfallTypesList={this.props.dealDetails.waterfallTypesList}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    dealDetails: state.dealDetails,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(dealDetailsActions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FundQuotesContainer);\n"],"sourceRoot":""}
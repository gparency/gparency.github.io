{"version":3,"sources":["actions/accountingActions.js","components/accounting/ReportEarnings.styles.js","components/accounting/ReportEarning.js","components/accounting/ReportPayments.js","components/accounting/ReportSummary.js","components/accounting/AccountingPage.js","components/accounting/AccountingContainer.js"],"names":["getAccountingReport","dispatch","a","type","types","ajax","url","config","BASE_URL","applyAuthHeader","success","response","status","tokenExpired","data","message","closeToast","useStyles","makeStyles","theme","mobileLayout","width","expansionPanel","marginBottom","expansionPanelDetails","padding","panelExpanded","borderBottom","root","heading","color","fontSize","fontWeight","mobileLayouts","display","flexDirection","justifyContent","listItemContainer","dealName","dealId","listHeader","listValue","totalsListItem","divider","margin","tipsPaper","tipsEarnedListItem","DesktopCL","hasCommission","hasTips","tabed","component","Paper","className","Tabs","onChange","value","classes","indicator","Tab","label","Divider","style","getDealsArray","map","deal","deal_id","deal_name","contact_name","net_fee","total_payments","tip_amount","tip_percentage","tip_balance","key","getRoundedCurrency","closing_date","expected_closing_date","primary_client_name","deal_fee_less_third_party_raw","deal_fee_less_third_party","qb_payments_raw","credit_payments_raw","balance_raw","portion_amount_raw","portion_amount_from_net_raw","portion_amount","broker_commission","unpaid_portion_raw","portionAmount","getDealsTotals","total","index","MobileCL","currentYear","tips_earned","tips_unconfirmed","tips_unpaid","ListSection","title","ListData","expandedDeal","List","ListItem","disableGutters","clsx","Grid","container","spacing","item","xs","name","children","useState","expand","setExpand","handleToggle","useCallback","ex","Accordion","expanded","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","num","formatCurrency","undefined","ReportEarning","props","state","bind","this","showpaidCreditColumn","commission_details","some","d","showunconfirmedCreditColumn","commission_unconfirmed_details","showunpaidCreditColumn","commission_unpaid_details","forceUpdate","i","tab","ev","setState","commission_current_ip","paid","unconfirmed","unpaid","currentIp","tipEarned","tip_details","tipUnpaid","tipUnconfirmed","commission_current_ip_totals","ip_deal_fee_total","deal_fee_total","ip_portion_total","portion_total","commission_details_totals","balance_total","credit_payments_total","qb_payments_total","commission_unconfirmed_details_totals","uc_balance_total","uc_credit_payments_total","uc_deal_fee_total","uc_expected_portion_amount","expected_portion_amount","uc_qb_payments_total","commission_unpaid_details_totals","up_balance_total","up_credit_payments_total","up_deal_fee_total","up_expected_portion_amount","up_qb_payments_total","up_unpaid_portion_total","unpaid_portion_total","isMobile","commission","total_compensation","blended","earned","entitled_expense_allowance","Date","getFullYear","height","lineHeight","alignItems","PureComponent","ReportPayments","showReimbursable","showNonReimbursable","toggleSection","non_reimbursable_tips_details","non_reimbursable_tips_paid","paid_support","paid_support_details","reimbursement_compensation","payment_details","payments_my_draw","reimbursable_tips_details","reimbursable_tips_paid","total_tips_paid","updated_at","detail","class","maxWidth","onClick","alt","src","minWidth","ReportSummary","actual_received","balance","loan","overrides_earned","starting","tips","total_earn","AccountingPage","useMobile","toast","show","Expire","delay","variant","report","AccountingContainer","navActions","updateNavTitle","actions","accounting","loading","isOpen","ariaHideApp","contentLabel","shouldCloseOnOverlayClick","match","params","React","Component","connect","bindActionCreators","accountingActions","navigationTitleActions"],"mappings":"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","file":"static/js/56.ed5d57aa.chunk.js","sourcesContent":["import * as types from \"./actionTypes\";\nimport config from \"../config\";\nimport { ajax } from \"../lib\";\nimport { tokenExpired } from \"./authenticationActions\";\n\nexport function getAccountingReport() {\n  return async (dispatch) => {\n    dispatch({ type: types.LOADING_ACCOUNTING_REPORT });\n    ajax({\n      url: `${config.BASE_URL}accounting-report-new`,\n      applyAuthHeader: true,\n      success: function (response) {\n        switch (response.status) {\n          case \"E403\":\n            dispatch(tokenExpired());\n            break;\n          case 200:\n            dispatch({\n              type: types.GET_ACCOUNTING_REPORT_SUCCESS,\n              data: response.data,\n            });\n            break;\n          default:\n            dispatch({\n              type: types.GET_ACCOUNTING_REPORT_FAILED,\n              data: {},\n              message: response.message,\n            });\n            break;\n        }\n      },\n    });\n  };\n}\n\nexport function closeToast() {\n  return { type: types.CLOSE_ACCOUNTING_TOAST };\n}\n","import { makeStyles } from \"@material-ui/core\";\nexport const useStyles = makeStyles((theme) => ({\n  mobileLayout: {\n    width: \"100%\",\n  },\n  expansionPanel: {\n    marginBottom: 10,\n  },\n  expansionPanelDetails: {\n    padding: \"8px 8px 8px\",\n  },\n  panelExpanded: {\n    borderBottom: \"1px solid #D8D8D8\",\n    marginBottom: 10,\n  },\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    color: \"rgba(0,0,0,0.87)\",\n    fontSize: 16,\n    fontWeight: 500,\n  },\n  mobileLayouts: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  listItemContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  dealName: {\n    color: \"rgba(0,0,0,0.87)\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n    marginBottom: 6,\n  },\n  dealId: {\n    color: \"#24d7d1\",\n    fontSize: 12,\n    fontWeight: 500,\n  },\n  listHeader: {\n    color: \"#999999\",\n    fontSize: 12,\n    fontWeight: 500,\n    marginBottom: 6,\n  },\n  listValue: {\n    color: \"rgba(0,0,0,0.87)\",\n    fontSize: 14,\n  },\n  totalsListItem: {\n    justifyContent: \"space-between\",\n    color: \"rgba(0,0,0,0.87)\",\n    fontSize: 12,\n  },\n  divider: {\n    color: \"#D8D8D8\",\n    margin: \"15px 0px\",\n  },\n  tipsPaper: {\n    padding: \"8px 24px\",\n    marginBottom: 12,\n  },\n  tipsEarnedListItem: {\n    fontWeight: \"bold\",\n    fontSize: 16,\n  },\n}));\n","import React, { PureComponent, useState, useCallback, Fragment } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Grid,\n  Divider,\n  Paper,\n  Tabs,\n  Tab,\n  List,\n  ListItem,\n} from \"@material-ui/core\";\nimport { formatCurrency } from \"../../lib\";\nimport { ExpandMoreIcon } from \"../../themes\";\nimport { useStyles } from \"./ReportEarnings.styles\";\n\nclass ReportEarning extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabed: \"paid\",\n    };\n    this.onChange = this.onChange.bind(this);\n    this.getDealsArray = this.getDealsArray.bind(this);\n    this.getDealsTotals = this.getDealsTotals.bind(this);\n  }\n\n  componentDidMount() {\n    const { data } = this.props;\n    this.showpaidCreditColumn = data.commission_details.some(\n      (d) => !!d.credit_payments_raw\n    );\n    this.showunconfirmedCreditColumn = data.commission_unconfirmed_details.some(\n      (d) => !!d.credit_payments_raw\n    );\n    this.showunpaidCreditColumn = data.commission_unpaid_details.some(\n      (d) => !!d.credit_payments_raw\n    );\n    // need to re-render to get the updated values.\n    this.forceUpdate();\n  }\n\n  showpaidCreditColumn;\n  showunconfirmedCreditColumn;\n  showunpaidCreditColumn;\n\n  onChange(i, value, tab, ev) {\n    this.setState({ tabed: value });\n  }\n\n  getDealsArray() {\n    const {\n      data: {\n        commission_details = [],\n        commission_unconfirmed_details = [],\n        commission_unpaid_details = [],\n        commission_current_ip = [],\n        tips_earned,\n        tips_unpaid,\n        tips_unconfirmed,\n      } = {},\n    } = this.props;\n\n    return {\n      paid: commission_details,\n      unconfirmed: commission_unconfirmed_details,\n      unpaid: commission_unpaid_details,\n      currentIp: commission_current_ip,\n      tipEarned: tips_earned ? tips_earned.tip_details : [],\n      tipUnpaid: tips_unpaid ? tips_unpaid.tip_details : [],\n      tipUnconfirmed: tips_unconfirmed ? tips_unconfirmed.tip_details : [],\n    };\n  }\n\n  getDealsTotals() {\n    const {\n      data: {\n        commission_current_ip_totals: {\n          deal_fee_total: ip_deal_fee_total,\n          portion_total: ip_portion_total,\n        } = {},\n        commission_details_totals: {\n          balance_total,\n          credit_payments_total,\n          deal_fee_total,\n          portion_total,\n          qb_payments_total,\n        } = {},\n        commission_unconfirmed_details_totals: {\n          balance_total: uc_balance_total,\n          credit_payments_total: uc_credit_payments_total,\n          deal_fee_total: uc_deal_fee_total,\n          expected_portion_amount: uc_expected_portion_amount,\n          qb_payments_total: uc_qb_payments_total,\n        } = {},\n        commission_unpaid_details_totals: {\n          balance_total: up_balance_total,\n          credit_payments_total: up_credit_payments_total,\n          deal_fee_total: up_deal_fee_total,\n          expected_portion_amount: up_expected_portion_amount,\n          qb_payments_total: up_qb_payments_total,\n          unpaid_portion_total: up_unpaid_portion_total,\n        } = {},\n      } = {},\n    } = this.props;\n    return {\n      paid: [\n        {\n          name: \"Total Deal Fee Less Third Party\",\n          value: getRoundedCurrency(deal_fee_total),\n        },\n        {\n          name: \"Total EU Received So Far\",\n          value: getRoundedCurrency(qb_payments_total),\n        },\n        {\n          name: \"Total Paid Via Credit\",\n          value: this.showpaidCreditColumn\n            ? getRoundedCurrency(credit_payments_total)\n            : null,\n        },\n        { name: \"Total Balance\", value: getRoundedCurrency(balance_total) },\n        {\n          name: \"Total Portion Amount\",\n          value: getRoundedCurrency(portion_total),\n        },\n      ],\n      unconfirmed: [\n        {\n          name: \"Total Deal Fee Less Third Party\",\n          value: getRoundedCurrency(uc_deal_fee_total),\n        },\n        {\n          name: \"Total EU Received So Far\",\n          value: getRoundedCurrency(uc_qb_payments_total),\n        },\n        {\n          name: \"Total Paid Via Credit\",\n          value: this.showunconfirmedCreditColumn\n            ? getRoundedCurrency(uc_credit_payments_total)\n            : null,\n        },\n        { name: \"Total Balance\", value: getRoundedCurrency(uc_balance_total) },\n        {\n          name: \"Total Portion Amount\",\n          value: getRoundedCurrency(uc_expected_portion_amount),\n        },\n      ],\n      unpaid: [\n        {\n          name: \"Total Deal Fee Less Third Party\",\n          value: getRoundedCurrency(up_deal_fee_total),\n        },\n        {\n          name: \"Total EU Received So Far\",\n          value: getRoundedCurrency(up_qb_payments_total),\n        },\n        {\n          name: \"Total Paid Via Credit\",\n          value: this.showunpaidCreditColumn\n            ? getRoundedCurrency(up_credit_payments_total)\n            : null,\n        },\n        { name: \"Total Balance\", value: getRoundedCurrency(up_balance_total) },\n        {\n          name: \"Total Portion Amount\",\n          value: getRoundedCurrency(up_expected_portion_amount),\n        },\n        {\n          name: \"Total Unpaid Amount\",\n          value: getRoundedCurrency(up_unpaid_portion_total),\n        },\n      ],\n      currentIp: [\n        {\n          name: \"Total Expected Fees Less 3rd Party\",\n          value: getRoundedCurrency(ip_deal_fee_total),\n        },\n        {\n          name: \"Total Portion Amount\",\n          value: getRoundedCurrency(ip_portion_total),\n        },\n      ],\n    };\n  }\n\n  render() {\n    const {\n      isMobile,\n      data: {\n        commission: {\n          total_compensation,\n          blended,\n          earned,\n          entitled_expense_allowance,\n        } = {},\n        commission_current_ip_totals: { portion_total: ip_portion_total } = {},\n        commission_details_totals: { portion_total } = {},\n        commission_unconfirmed_details_totals: {\n          expected_portion_amount: uc_expected_portion_amount,\n        } = {},\n        commission_unpaid_details_totals: {\n          unpaid_portion_total: up_unpaid_portion_total,\n        } = {},\n        tips_earned,\n        tips_unconfirmed,\n        tips_unpaid,\n      } = {},\n    } = this.props;\n    const { tabed } = this.state;\n    const currentYear = new Date().getFullYear();\n    const hasTips = !!tips_earned || !!tips_unpaid || !!tips_unconfirmed;\n    const hasCommission =\n      !!portion_total ||\n      !!uc_expected_portion_amount ||\n      !!up_unpaid_portion_total ||\n      !!ip_portion_total;\n\n    return (\n      <div className=\"earnings-page-container\">\n        <div className=\"earnings-flex\">\n          <div className=\"earnings-col earnings-first-col\">\n            {hasCommission && (\n              <Paper className=\"material-ui-panel earnings-panel\">\n                <div\n                  className=\"flex-space-justify\"\n                  style={{ height: 35, lineHeight: 1 }}\n                >\n                  <span className=\"earnings-detail\">\n                    {`My Portion Closed ${currentYear} Paid and Confirmed`}\n                  </span>\n                  <span className=\"accounting-card-amount-earnings-detail\">\n                    {getRoundedCurrency(portion_total)}\n                  </span>\n                </div>\n                <Divider className=\"earnings-divider\" />\n                <div className=\"flex-space-justify\">\n                  <span className=\"earnings-detail\">\n                    My Unconfirmed CL Fees\n                  </span>\n                  <span className=\"earnings-detail bold-text\">\n                    {getRoundedCurrency(uc_expected_portion_amount)}\n                  </span>\n                </div>\n                <div className=\"flex-space-justify\">\n                  <span className=\"earnings-detail\">My Unpaid CL Fees</span>\n                  <span className=\"earnings-detail bold-text\">\n                    {getRoundedCurrency(up_unpaid_portion_total)}\n                  </span>\n                </div>\n                <div className=\"flex-space-justify\">\n                  <span className=\"earnings-detail\">My Current IP Portion</span>\n                  <span className=\"earnings-detail bold-text\">\n                    {getRoundedCurrency(ip_portion_total)}\n                  </span>\n                </div>\n              </Paper>\n            )}\n            {!isMobile && hasTips && (\n              <Paper className=\"material-ui-panel earnings-panel\">\n                <div\n                  className=\"flex-space-justify\"\n                  style={{ height: 25, lineHeight: 1 }}\n                >\n                  <span className=\"earnings-detail\">\n                    {`Tips Earned ${currentYear}`}\n                  </span>\n                  <span className=\"accounting-card-amount-earnings-detail\">\n                    {getRoundedCurrency(tips_earned && tips_earned.tips_earned)}\n                  </span>\n                </div>\n                <Divider className=\"earnings-divider\" />\n                <div className=\"flex-space-justify\">\n                  <span className=\"earnings-detail\">My Unconfirmed Tips</span>\n                  <span className=\"earnings-detail bold-text\">\n                    {getRoundedCurrency(\n                      tips_unconfirmed && tips_unconfirmed.tips_earned\n                    )}\n                  </span>\n                </div>\n                <div className=\"flex-space-justify\">\n                  <span className=\"earnings-detail\">My Unpaid Tips</span>\n                  <span className=\"earnings-detail bold-text\">\n                    {getRoundedCurrency(tips_unpaid && tips_unpaid.tips_unpaid)}\n                  </span>\n                </div>\n              </Paper>\n            )}\n          </div>\n          {hasCommission && (\n            <Paper className=\"material-ui-panel earnings-second-col\">\n              <div\n                className=\"earnings-col\"\n                style={{ justifyContent: \"space-between\", height: \"100%\" }}\n              >\n                <div>\n                  <div className=\"flex-space-justify\" style={{ height: 35 }}>\n                    <span\n                      className=\"earnings-detail\"\n                      style={{ alignItems: \"center\" }}\n                    >\n                      Total Earned YTD\n                    </span>\n                    <span className=\"accounting-card-amount-earnings-detail\">\n                      {getRoundedCurrency(total_compensation)}\n                    </span>\n                  </div>\n                  <Divider className=\"earnings-divider\" />\n                  <div className=\"flex-space-justify\">\n                    <span className=\"earnings-detail\">\n                      Blended Commission Rate\n                    </span>\n                    <span className=\"earnings-detail bold-text\">\n                      {`${blended}%`}\n                    </span>\n                  </div>\n                  <div className=\"flex-space-justify\">\n                    <span className=\"earnings-detail\">{`My Commission Earned ${currentYear}`}</span>\n                    <span className=\"earnings-detail bold-text\">\n                      {getRoundedCurrency(earned)}\n                    </span>\n                  </div>\n                  <div className=\"flex-space-justify\">\n                    <span className=\"earnings-detail\">\n                      Additional Compensation Earned from EU Expense Package\n                      (not included in total earned above)\n                    </span>\n                    <span className=\"earnings-detail bold-text\">\n                      {getRoundedCurrency(entitled_expense_allowance)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Paper>\n          )}\n        </div>\n        {isMobile ? (\n          <MobileCL\n            hasCommission={hasCommission}\n            hasTips={hasTips}\n            tips_earned={tips_earned}\n            tips_unpaid={tips_unpaid}\n            tips_unconfirmed={tips_unconfirmed}\n            currentYear={currentYear}\n            component={this}\n          />\n        ) : (\n          <DesktopCL\n            hasCommission={hasCommission}\n            hasTips={hasTips}\n            tabed={tabed}\n            component={this}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nfunction DesktopCL({ hasCommission, hasTips, tabed, component }) {\n  return (\n    <Paper className=\"material-ui-panel earnings-table-container\">\n      <Tabs\n        onChange={component.onChange}\n        value={tabed}\n        classes={{ indicator: \"earnings-tabs-indicator\" }}\n      >\n        {hasCommission && (\n          <Tab\n            value=\"paid\"\n            className=\"earnings-tab\"\n            label=\"CL PAID & CONFIRMED\"\n          />\n        )}\n        {hasCommission && (\n          <Tab\n            value=\"unconfirmed\"\n            className=\"earnings-tab\"\n            label=\"UNCONFIRMED CL\"\n          />\n        )}\n        {hasCommission && (\n          <Tab value=\"unpaid\" className=\"earnings-tab\" label=\"UNPAID CL\" />\n        )}\n        {hasCommission && (\n          <Tab value=\"currentIp\" className=\"earnings-tab\" label=\"CURRENT IP\" />\n        )}\n        {hasTips && (\n          <Tab value=\"tipEarned\" className=\"earnings-tab\" label=\"TIPS EARNED\" />\n        )}\n        {hasTips && (\n          <Tab\n            value=\"tipUnconfirmed\"\n            className=\"earnings-tab\"\n            label=\"TIPS UNCONFIRMED\"\n          />\n        )}\n        {hasTips && (\n          <Tab value=\"tipUnpaid\" className=\"earnings-tab\" label=\"TIPS UNPAID\" />\n        )}\n      </Tabs>\n      <Divider style={{ margin: 0 }} />\n      <table className=\"summary-table\">\n        <tbody>\n          {tabed === \"tipEarned\" ||\n          tabed === \"tipUnpaid\" ||\n          tabed === \"tipUnconfirmed\" ? (\n            <tr>\n              <th>Deal ID</th>\n              <th>Deal Name</th>\n              <th>Client Name</th>\n              <th>Net Fee</th>\n              <th>Total Payments</th>\n              <th>Tip</th>\n              {tabed === \"tipUnpaid\" && <th>Unpaid Tip Amount</th>}\n            </tr>\n          ) : (\n            <tr>\n              <th>Deal ID</th>\n              <th>Deal Name</th>\n              <th>\n                {tabed === \"currentIp\"\n                  ? \"Projected Closing Date\"\n                  : \"Closing Date\"}\n              </th>\n              <th>Client Name</th>\n              <th>\n                {tabed === \"currentIp\"\n                  ? \"Expected Fee Less Third Party\"\n                  : \"Deal Fee Less Third Party\"}\n              </th>\n              {tabed !== \"currentIp\" && <th>EU Received So Far</th>}\n              {tabed !== \"currentIp\" &&\n                !!component[`show${tabed}CreditColumn`] && (\n                  <th>Paid Via Credit</th>\n                )}\n              {tabed !== \"currentIp\" && <th>Balance</th>}\n              <th>Portion Amount</th>\n              {tabed === \"unpaid\" && <th>Unpaid Amount</th>}\n            </tr>\n          )}\n          {tabed === \"tipEarned\" ||\n          tabed === \"tipUnpaid\" ||\n          tabed === \"tipUnconfirmed\"\n            ? component.getDealsArray()[tabed].map((deal) => {\n                const {\n                  deal_id,\n                  deal_name,\n                  contact_name,\n                  net_fee,\n                  total_payments,\n                  tip_amount,\n                  tip_percentage,\n                  tip_balance,\n                } = deal;\n                return (\n                  <tr key={deal_id}>\n                    <td>{deal_id}</td>\n                    <td>{deal_name}</td>\n                    <td>{contact_name}</td>\n                    <td>{getRoundedCurrency(net_fee)}</td>\n                    {tabed !== \"currentIp\" && (\n                      <td>\n                        {total_payments\n                          ? getRoundedCurrency(total_payments)\n                          : \"-\"}\n                      </td>\n                    )}\n                    <td>{`${getRoundedCurrency(\n                      tip_amount\n                    )}(${tip_percentage}%)`}</td>\n                    {tabed === \"tipUnpaid\" && (\n                      <td>{getRoundedCurrency(tip_balance)}</td>\n                    )}\n                  </tr>\n                );\n              })\n            : component.getDealsArray()[tabed].map((deal) => {\n                const {\n                  deal_id,\n                  deal_name,\n                  closing_date,\n                  expected_closing_date,\n                  primary_client_name,\n                  contact_name,\n                  deal_fee_less_third_party_raw,\n                  deal_fee_less_third_party,\n                  qb_payments_raw,\n                  credit_payments_raw,\n                  balance_raw,\n                  portion_amount_raw,\n                  portion_amount_from_net_raw,\n                  portion_amount,\n                  broker_commission,\n                  unpaid_portion_raw,\n                } = deal;\n                const portionAmount =\n                  tabed === \"paid\"\n                    ? portion_amount_raw\n                    : tabed === \"unconfirmed\" || tabed === \"unpaid\"\n                    ? portion_amount_from_net_raw\n                    : portion_amount;\n                return (\n                  <tr key={deal_id}>\n                    <td>{deal_id}</td>\n                    <td>{deal_name}</td>\n                    <td>{closing_date || expected_closing_date}</td>\n                    <td>{primary_client_name || contact_name}</td>\n                    <td>\n                      {getRoundedCurrency(\n                        deal_fee_less_third_party_raw ||\n                          deal_fee_less_third_party\n                      )}\n                    </td>\n                    {tabed !== \"currentIp\" && (\n                      <td>\n                        {qb_payments_raw\n                          ? getRoundedCurrency(qb_payments_raw)\n                          : \"-\"}\n                      </td>\n                    )}\n                    {tabed !== \"currentIp\" &&\n                      !!component[`show${tabed}CreditColumn`] && (\n                        <td>\n                          {credit_payments_raw\n                            ? getRoundedCurrency(credit_payments_raw)\n                            : \"-\"}\n                        </td>\n                      )}\n                    {tabed !== \"currentIp\" && (\n                      <td>\n                        {balance_raw ? getRoundedCurrency(balance_raw) : \"-\"}\n                      </td>\n                    )}\n                    <td>{`${getRoundedCurrency(\n                      portionAmount\n                    )}(${broker_commission}%)`}</td>\n                    {tabed === \"unpaid\" && (\n                      <td>{getRoundedCurrency(unpaid_portion_raw)}</td>\n                    )}\n                  </tr>\n                );\n              })}\n          {tabed !== \"tipEarned\" &&\n            tabed !== \"tipUnpaid\" &&\n            tabed !== \"tipUnconfirmed\" && (\n              <tr>\n                <th>Total</th>\n                <th />\n                <th />\n                <th />\n                {component.getDealsTotals()[tabed].map((total, index) => {\n                  const { value } = total;\n                  if (value === null) return null;\n                  return <th key={index}>{value}</th>;\n                })}\n              </tr>\n            )}\n        </tbody>\n      </table>\n    </Paper>\n  );\n}\n\nfunction MobileCL({\n  hasCommission,\n  hasTips,\n  currentYear,\n  tips_earned,\n  tips_unconfirmed,\n  tips_unpaid,\n  component,\n}) {\n  const classes = useStyles();\n  return (\n    <div>\n      {hasCommission && (\n        <ListSection title=\"CL PAID & CONFIRMED\">\n          <ListData component={component} expandedDeal=\"paid\" />\n        </ListSection>\n      )}\n      {hasCommission && (\n        <ListSection title=\"UNCONFIRMED CL\">\n          <ListData component={component} expandedDeal=\"unconfirmed\" />\n        </ListSection>\n      )}\n      {hasCommission && (\n        <ListSection title=\"UNPAID CL\">\n          <ListData component={component} expandedDeal=\"unpaid\" />\n        </ListSection>\n      )}\n      {hasCommission && (\n        <ListSection title=\"CURRENT IP\">\n          <ListData component={component} expandedDeal=\"currentIp\" />\n        </ListSection>\n      )}\n      {hasTips && (\n        <Paper classes={{ root: classes.tipsPaper }}>\n          <List>\n            <ListItem\n              disableGutters\n              classes={{\n                root: clsx(classes.totalsListItem, classes.tipsEarnedListItem),\n              }}\n            >\n              <span>{`Tips Earned ${currentYear}`}</span>\n              <span>\n                {getRoundedCurrency(tips_earned && tips_earned.tips_earned)}\n              </span>\n            </ListItem>\n            <ListItem disableGutters classes={{ root: classes.totalsListItem }}>\n              <span>My Unconfirmed Tips</span>\n              <span>\n                <strong>\n                  {getRoundedCurrency(\n                    tips_unconfirmed && tips_unconfirmed.tips_earned\n                  )}\n                </strong>\n              </span>\n            </ListItem>\n            <ListItem disableGutters classes={{ root: classes.totalsListItem }}>\n              <span>My Unpaid Tips</span>\n              <span>\n                <strong>\n                  {getRoundedCurrency(tips_unpaid && tips_unpaid.tips_unpaid)}\n                </strong>\n              </span>\n            </ListItem>\n          </List>\n        </Paper>\n      )}\n      {hasTips && (\n        <ListSection value=\"\" title=\"TIPS EARNED\">\n          <ListData component={component} expandedDeal=\"tipEarned\" />\n        </ListSection>\n      )}\n      {hasTips && (\n        <ListSection title=\"TIPS UNCONFIRMED\">\n          <ListData component={component} expandedDeal=\"tipUnconfirmed\" />\n        </ListSection>\n      )}\n      {hasTips && (\n        <ListSection title=\"TIPS UNPAID\">\n          <ListData component={component} expandedDeal=\"tipUnpaid\" />\n        </ListSection>\n      )}\n    </div>\n  );\n}\n\nfunction ListData({ component, expandedDeal }) {\n  const classes = useStyles();\n  return (\n    <div className={classes.mobileLayout}>\n      {expandedDeal === \"tipEarned\" ||\n      expandedDeal === \"tipUnpaid\" ||\n      expandedDeal === \"tipUnconfirmed\"\n        ? component.getDealsArray()[expandedDeal].map((deal) => {\n            const {\n              deal_id,\n              deal_name,\n              contact_name,\n              net_fee,\n              total_payments,\n              tip_amount,\n              tip_percentage,\n              tip_balance,\n            } = deal;\n            return (\n              <Fragment key={deal_id}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.dealName}>{deal_name}</div>\n                      <div>\n                        Deal ID:{\" \"}\n                        <span className={classes.dealId}>{deal_id}</span>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>Deal Name</div>\n                      <div className={classes.listValue}>{deal_name}</div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>Client Name</div>\n                      <div className={classes.listValue}>{contact_name}</div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>Net Fee</div>\n                      <div className={classes.listValue}>\n                        {getRoundedCurrency(net_fee)}\n                      </div>\n                    </div>\n                  </Grid>\n                  {expandedDeal !== \"currentIp\" && (\n                    <Grid item xs={6}>\n                      <div className={classes.listItemContainer}>\n                        <div className={classes.listHeader}>Total Payments</div>\n                        <div className={classes.listValue}>\n                          {total_payments\n                            ? getRoundedCurrency(total_payments)\n                            : \"-\"}\n                        </div>\n                      </div>\n                    </Grid>\n                  )}\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>Tip</div>\n                      <div className={classes.listValue}>\n                        {`${getRoundedCurrency(\n                          tip_amount\n                        )}(${tip_percentage}%)`}\n                      </div>\n                    </div>\n                  </Grid>\n                  {expandedDeal === \"tipUnpaid\" && (\n                    <Grid item xs={6}>\n                      <div className={classes.listItemContainer}>\n                        <div className={classes.listHeader}>\n                          Unpaid Tip Amount\n                        </div>\n                        <div className={classes.listValue}>\n                          {getRoundedCurrency(tip_balance)}\n                        </div>\n                      </div>\n                    </Grid>\n                  )}\n                </Grid>\n                <Divider className={classes.divider} />\n              </Fragment>\n            );\n          })\n        : component.getDealsArray()[expandedDeal].map((deal) => {\n            const {\n              deal_id,\n              deal_name,\n              closing_date,\n              expected_closing_date,\n              primary_client_name,\n              contact_name,\n              deal_fee_less_third_party_raw,\n              deal_fee_less_third_party,\n              qb_payments_raw,\n              credit_payments_raw,\n              balance_raw,\n              portion_amount_raw,\n              portion_amount_from_net_raw,\n              portion_amount,\n              broker_commission,\n              unpaid_portion_raw,\n            } = deal;\n            const portionAmount =\n              expandedDeal === \"paid\"\n                ? portion_amount_raw\n                : expandedDeal === \"unconfirmed\" || expandedDeal === \"unpaid\"\n                ? portion_amount_from_net_raw\n                : portion_amount;\n            return (\n              <Fragment key={deal_id}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.dealName}>{deal_name}</div>\n                      <div>\n                        Deal ID:{\" \"}\n                        <span className={classes.dealId}>{deal_id}</span>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>\n                        {expandedDeal === \"currentIp\"\n                          ? \"Projected Closing Date\"\n                          : \"Closing Date\"}\n                      </div>\n                      <div className={classes.listValue}>\n                        {closing_date || expected_closing_date}\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>Client Name</div>\n                      <div className={classes.listValue}>\n                        {primary_client_name || contact_name}\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>\n                        {expandedDeal === \"currentIp\"\n                          ? \"Expected Fee Less Third Party\"\n                          : \"Deal Fee Less 3rd Party\"}\n                      </div>\n                      <div className={classes.listValue}>\n                        {getRoundedCurrency(\n                          deal_fee_less_third_party_raw ||\n                            deal_fee_less_third_party\n                        )}\n                      </div>\n                    </div>\n                  </Grid>\n                  {expandedDeal !== \"currentIp\" && (\n                    <Grid item xs={6}>\n                      <div className={classes.listItemContainer}>\n                        <div className={classes.listHeader}>\n                          EU Received So Far\n                        </div>\n                        <div className={classes.listValue}>\n                          {qb_payments_raw\n                            ? getRoundedCurrency(qb_payments_raw)\n                            : \"-\"}\n                        </div>\n                      </div>\n                    </Grid>\n                  )}\n                  {expandedDeal !== \"currentIp\" &&\n                    !!component[`show${expandedDeal}CreditColumn`] &&\n                    !!credit_payments_raw && (\n                      <Grid item xs={6}>\n                        <div className={classes.listItemContainer}>\n                          <div className={classes.listHeader}>\n                            Paid Via Credit\n                          </div>\n                          <div className={classes.listValue}>\n                            {getRoundedCurrency(credit_payments_raw)}\n                          </div>\n                        </div>\n                      </Grid>\n                    )}\n                  {expandedDeal !== \"currentIp\" && (\n                    <Grid item xs={6}>\n                      <div className={classes.listItemContainer}>\n                        <div className={classes.listHeader}>Balance</div>\n                        <div className={classes.listValue}>\n                          {balance_raw ? getRoundedCurrency(balance_raw) : \"-\"}\n                        </div>\n                      </div>\n                    </Grid>\n                  )}\n                  <Grid item xs={6}>\n                    <div className={classes.listItemContainer}>\n                      <div className={classes.listHeader}>Portion Amount</div>\n                      <div className={classes.listValue}>{`${getRoundedCurrency(\n                        portionAmount\n                      )}(${broker_commission}%)`}</div>\n                    </div>\n                  </Grid>\n                  {expandedDeal === \"unpaid\" && (\n                    <Grid item xs={6}>\n                      <div className={classes.listItemContainer}>\n                        <div className={classes.listHeader}>Unpaid Amount</div>\n                        <div className={classes.listValue}>\n                          {getRoundedCurrency(unpaid_portion_raw)}\n                        </div>\n                      </div>\n                    </Grid>\n                  )}\n                </Grid>\n                <Divider className={classes.divider} />\n              </Fragment>\n            );\n          })}\n      {expandedDeal !== \"tipEarned\" &&\n        expandedDeal !== \"tipUnpaid\" &&\n        expandedDeal !== \"tipUnconfirmed\" && (\n          <List>\n            {component.getDealsTotals()[expandedDeal].map((total, index) => {\n              const { name, value } = total;\n              if (value === null) return null;\n              return (\n                <ListItem\n                  disableGutters\n                  classes={{ root: classes.totalsListItem }}\n                  key={index}\n                >\n                  <span>{name}</span>\n                  <span>\n                    <strong>{value}</strong>\n                  </span>\n                </ListItem>\n              );\n            })}\n          </List>\n        )}\n    </div>\n  );\n}\n\nfunction ListSection({ title, children }) {\n  const [expand, setExpand] = useState(false);\n  const classes = useStyles();\n\n  const handleToggle = useCallback(() => {\n    setExpand((ex) => !ex);\n  }, []);\n\n  return (\n    <Accordion\n      expanded={expand}\n      onChange={handleToggle}\n      className={classes.expansionPanel}\n    >\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n        classes={{ root: clsx({ [classes.panelExpanded]: expand }) }}\n      >\n        <div className={classes.heading}>{title}</div>\n      </AccordionSummary>\n      <AccordionDetails classes={{ root: classes.expansionPanelDetails }}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n    // <Divider className={classes.divider} />\n  );\n}\n\nfunction getRoundedCurrency(num) {\n  return formatCurrency(num, 0, undefined, true);\n}\n\nexport default ReportEarning;\n","import React, { PureComponent } from \"react\";\n\nimport Panel from \"muicss/lib/react/panel\";\nimport Divider from \"muicss/lib/react/divider\";\n\nimport { formatCurrency } from \"../../lib\";\n\nclass ReportPayments extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showReimbursable: false,\n      showNonReimbursable: false,\n    };\n    this.toggleSection = this.toggleSection.bind(this);\n  }\n\n  toggleSection(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n\n  render() {\n    const {\n      data: {\n        non_reimbursable_tips_details = [],\n        non_reimbursable_tips_paid,\n        paid_support,\n        paid_support_details = [],\n        reimbursement_compensation,\n        payment_details = [],\n        payments_my_draw,\n        reimbursable_tips_details = [],\n        reimbursable_tips_paid,\n        total_tips_paid,\n        updated_at,\n      } = {},\n    } = this.props;\n    const { showNonReimbursable, showReimbursable } = this.state;\n\n    return (\n      <div className=\"earnings-page-container\">\n        <Panel className=\"earnings-panel\">\n          <div className=\"flex-space-justify\" style={{ height: 45 }}>\n            <span className=\"payments-title\">\n              Reimbursable Support Paid\n              {updated_at && (\n                <span className=\"payments-updated\">{`Last updated ${updated_at}`}</span>\n              )}\n            </span>\n            <span className=\"payments-title\">\n              {getRoundedCurrency(paid_support)}\n            </span>\n          </div>\n          <table className=\"summary-table\">\n            <tbody>\n              {paid_support_details.map((detail, index) => {\n                const { item, value } = detail;\n                return (\n                  <tr key={index}>\n                    <td>{item}</td>\n                    <td className=\"align-right\">{getRoundedCurrency(value)}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          {!!reimbursement_compensation && (\n            <div class=\"payments-entitled\">\n              **On January 31 (if employed), you will be credited{\" \"}\n              {getRoundedCurrency(reimbursement_compensation)}.\n            </div>\n          )}\n        </Panel>\n        <Panel className=\"earnings-panel\">\n          <div\n            className=\"flex-space-justify\"\n            // style={{ height: 25, lineHeight: 1 }}\n          >\n            <span className=\"payments-title\">Tips paid</span>\n            <span className=\"payments-title\">\n              {getRoundedCurrency(total_tips_paid)}\n            </span>\n          </div>\n          <Divider className=\"earnings-divider\" />\n          <table className=\"tips-paid-table\">\n            <tbody>\n              <tr>\n                <td style={{ maxWidth: 25 }}>\n                  <span\n                    className=\"payments-icon\"\n                    onClick={() => this.toggleSection(\"showReimbursable\")}\n                  >\n                    <img\n                      alt=\"add\"\n                      src={`/images/icons/${\n                        showReimbursable ? \"minus.png\" : \"add.png\"\n                      }`}\n                    />\n                  </span>\n                </td>\n                <td style={{ minWidth: 210 }}>\n                  <span className=\"bold-text\">Reimbursable Tips Paid</span>\n                </td>\n                <td>\n                  <span className=\"bold-text\">\n                    {getRoundedCurrency(reimbursable_tips_paid)}\n                  </span>\n                </td>\n              </tr>\n              {showReimbursable &&\n                reimbursable_tips_details.map((detail, index) => {\n                  const { item, value } = detail;\n                  return (\n                    <tr key={index}>\n                      <td />\n                      <td className=\"earnings-detail\">{item}</td>\n                      <td className=\"align-right earnings-detail\">\n                        {getRoundedCurrency(value)}\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n          <Divider className=\"earnings-divider\" />\n          <table className=\"tips-paid-table\">\n            <tbody>\n              <tr>\n                <td style={{ maxWidth: 25 }}>\n                  <span\n                    className=\"payments-icon\"\n                    onClick={() => this.toggleSection(\"showNonReimbursable\")}\n                  >\n                    <img\n                      alt=\"add\"\n                      src={`/images/icons/${\n                        showNonReimbursable ? \"minus.png\" : \"add.png\"\n                      }`}\n                    />\n                  </span>\n                </td>\n                <td>\n                  <span className=\"bold-text\">Non-Reimbursable Tips Paid</span>\n                </td>\n                <td>\n                  <span className=\"bold-text\">\n                    {getRoundedCurrency(non_reimbursable_tips_paid)}\n                  </span>\n                </td>\n              </tr>\n              {showNonReimbursable &&\n                non_reimbursable_tips_details.map((detail, index) => {\n                  const { item, value } = detail;\n                  return (\n                    <tr key={index}>\n                      <td />\n                      <td className=\"earnings-detail\">{item}</td>\n                      <td className=\"align-right earnings-detail\">\n                        {getRoundedCurrency(value)}\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n          <Divider className=\"earnings-divider\" />\n        </Panel>\n        <Panel className=\"earnings-panel\">\n          <div\n            className=\"flex-space-justify\"\n            // style={{ height: 25, lineHeight: 1 }}\n          >\n            <span className=\"payments-title\">Payments (My Draw & Others)</span>\n            <span className=\"payments-title\">\n              {getRoundedCurrency(payments_my_draw)}\n            </span>\n          </div>\n          <table className=\"summary-table\">\n            <tbody>\n              {payment_details.map((detail) => {\n                const { item, value } = detail;\n                return (\n                  <tr>\n                    <td>{item}</td>\n                    <td className=\"align-right\">{getRoundedCurrency(value)}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nfunction getRoundedCurrency(num) {\n  return formatCurrency(num, 0, undefined, true);\n}\n\nexport default ReportPayments;\n","import React from \"react\";\n\nimport Panel from \"muicss/lib/react/panel\";\n\nimport { formatCurrency } from \"../../lib\";\n\nconst ReportSummary = (props) => {\n  const {\n    data: {\n      actual_received,\n      balance,\n      loan,\n      overrides_earned,\n      starting,\n      tips,\n      total_compensation,\n      total_earn,\n    } = {},\n  } = props;\n\n  return (\n    <div>\n      <div className=\"accounting-card-container\">\n        <Panel className=\"accounting-card  accounting-card-hide-mobile\">\n          <p className=\"accounting-card-amount\">\n            {formatCurrency(starting, 0, undefined, true)}\n          </p>\n          <p className=\"accounting-card-amount-details\">\n            {`${new Date().getFullYear()} Starting Balance`}\n          </p>\n        </Panel>\n        <Panel className=\"accounting-card\">\n          <p className=\"accounting-card-amount\">\n            {formatCurrency(balance, 0, undefined, true)}\n          </p>\n          <p className=\"accounting-card-amount-details\">\n            Total Available Balance\n          </p>\n        </Panel>\n        {!!loan && (\n          <Panel className=\"accounting-card accounting-card-hide-mobile\">\n            <p className=\"accounting-card-amount\">\n              {formatCurrency(loan, 0, undefined, true)}\n            </p>\n            <p className=\"accounting-card-amount-details\">\n              Loan Balance (Not Included in Total)\n            </p>\n          </Panel>\n        )}\n      </div>\n      <div className=\"accounting-list accounting-container\">\n        <div className=\"summary-title\">Summary</div>\n        <div style={{ padding: \"0 15px 15px 15px\" }}>\n          <table className=\"summary-table\">\n            <tbody>\n              <tr>\n                <th>{`${new Date().getFullYear()} Starting Balance`}</th>\n                <th className=\"align-right\">\n                  {formatCurrency(starting, 0, undefined, true)}\n                </th>\n              </tr>\n              <tr>\n                <td>Total Commissions Earned</td>\n                <td className=\"align-right\">\n                  {formatCurrency(total_compensation, 0, undefined, true)}\n                </td>\n              </tr>\n              <tr>\n                <td>Total Tips Earned</td>\n                <td className=\"align-right\">\n                  {formatCurrency(tips, 0, undefined, true)}\n                </td>\n              </tr>\n              {!!overrides_earned && (\n                <tr>\n                  <td>Overrides Earned</td>\n                  <td className=\"align-right\">\n                    {formatCurrency(overrides_earned, 0, undefined, true)}\n                  </td>\n                </tr>\n              )}\n              <tr>\n                <td>Total Earned YTD</td>\n                <td className=\"align-right\">\n                  {formatCurrency(total_earn, 0, undefined, true)}\n                </td>\n              </tr>\n              <tr>\n                <td>Actual Money Drawn Out to Me or On My Behalf</td>\n                <td className=\"align-right\">\n                  {formatCurrency(actual_received, 0, undefined, true)}\n                </td>\n              </tr>\n              <tr>\n                <th>Total Available Balance</th>\n                <th className=\"align-right\">\n                  {formatCurrency(balance, 0, undefined, true)}\n                </th>\n              </tr>\n              {!!loan && (\n                <tr>\n                  <th>Loan Balance (Not Included in Total)</th>\n                  <th className=\"align-right\">\n                    {formatCurrency(loan, 0, undefined, true)}\n                  </th>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportSummary;\n","import React from \"react\";\nimport ReportEarning from \"./ReportEarning\";\nimport ReportPayments from \"./ReportPayments\";\nimport ReportSummary from \"./ReportSummary\";\nimport Expire from \"../common/Expire\";\nimport Button from \"muicss/lib/react/button\";\nimport { useMobile } from \"../../themes\";\n\nexport default function AccountingPage(props) {\n  const isMobile = useMobile();\n  let toast = \"\";\n  if (props.toast.show) {\n    toast = (\n      <Expire closeToast={props.closeToast} delay={6000}>\n        <div className=\"success-message\">\n          <p>{props.toast.message}</p>\n          <Button variant=\"flat\" onClick={props.closeToast}>\n            {props.toast.success ? \"Done\" : \"Dismiss\"}\n          </Button>\n        </div>\n      </Expire>\n    );\n  }\n  let report = null;\n  if (props.report) {\n    switch (props.type) {\n      case \"earnings\":\n        report = (\n          <ReportEarning data={props.report[props.type]} isMobile={isMobile} />\n        );\n        break;\n      case \"payments\":\n        report = (\n          <ReportPayments data={props.report[props.type]} isMobile={isMobile} />\n        );\n        break;\n      case \"summary\":\n        report = (\n          <ReportSummary data={props.report[props.type]} isMobile={isMobile} />\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className=\"accounting-outer-container\">\n      {toast}\n      {props.report ? (\n        <div>{report}</div>\n      ) : (\n        <div>\n          <div className=\"grey-circle\">\n            <i className=\"material-icons\">attach_money</i>\n          </div>\n          <h2 className=\"no-results\">\n            Data will become available once all quotes are up to date\n          </h2>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as accountingActions from \"../../actions/accountingActions\";\nimport * as navigationTitleActions from \"../../actions/navigationTitleActions\";\nimport { bindActionCreators } from \"redux\";\nimport Modal from \"react-modal\";\nimport AccountingPage from \"./AccountingPage\";\n\nclass AccountingContainer extends React.Component {\n  componentDidMount() {\n    this.props.navActions.updateNavTitle(\"Accounting\");\n    this.props.actions.getAccountingReport();\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.accounting.loading ? (\n          <AccountingPage\n            report={this.props.accounting.data}\n            type={this.props.match.params.type}\n            toast={this.props.accounting.toast}\n            closeToast={this.props.actions.closeToast}\n          />\n        ) : (\n          <Modal\n            className=\"loading-modal\"\n            isOpen={true}\n            ariaHideApp={false}\n            contentLabel=\"Modal\"\n            shouldCloseOnOverlayClick={false}\n          >\n            <div className=\"centered-spinner\">\n              <img\n                src=\"/images/icons/spin.svg\"\n                className=\"loading-spinner\"\n                alt=\"loading spinner\"\n              />\n            </div>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    accounting: state.accounting,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(accountingActions, dispatch),\n    navActions: bindActionCreators(navigationTitleActions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AccountingContainer);\n"],"sourceRoot":""}
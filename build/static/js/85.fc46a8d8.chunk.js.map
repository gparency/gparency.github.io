{"version":3,"sources":["components/reports/reportsView.styles.js","components/reports/reportView.js"],"names":["useStyles","makeStyles","theme","container","height","width","breakpoints","down","actionsContainer","display","alignItems","justifyContent","padding","button","textTransform","fontWeight","viewQuery","pdf","ReportsView","location","useLocation","dispatch","useDispatch","classes","isMobile","useMobile","report","qs","parse","search","useState","params","setParams","iframeSrc","setIframeSrc","loading","setLoading","hideLoader","useCallback","useEffect","bankId","srId","mtmData","mtmCombined","reportName","a","src","reportsData","config","BASE_URL","url","query","undefined","ajax","applyAuthHeader","signedResponse","data","getUrl","goBack","Navigation","go","handleDownload","downloadFunc","className","IconButton","onClick","Button","startIcon","window","canShareUrl","style","encodeURIComponent","title","onLoad","Loader","getAllInOneReport","stringify","getBankPipelineReport","bank_id","getReportPDF","sr_id","mtm","getMTMReport","getMTMQuery","getFullBlownMTMReport","members","combined","membersArray","queryData","length","map","m","index","parseInt"],"mappings":"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","file":"static/js/85.fc46a8d8.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\nexport const useStyles = makeStyles((theme) => ({\n  container: {\n    height: \"100%\",\n    width: \"100%\",\n    [theme.breakpoints.down(\"md\")]: {\n      height: \"calc(100% - 40px)\",\n    },\n  },\n  actionsContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    height: 48,\n    padding: 15,\n    [theme.breakpoints.down(\"xs\")]: {\n      padding: 0,\n    },\n  },\n  button: {\n    textTransform: \"capitalize\",\n    fontWeight: \"bold\",\n  },\n}));\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport qs from \"query-string\";\nimport { useLocation } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { IconButton, Button } from \"@material-ui/core\";\nimport { Navigation, ajax } from \"../../lib\";\nimport {\n  getAllInOneReport,\n  getBankPipelineReport,\n  getReportPDF,\n  getMTMReport,\n  getFullBlownMTMReport,\n} from \"../../actions/reportsActions\";\nimport { useMobile, ArrowBackIcon, DownloadIcon, ShareIcon } from \"../../themes\";\nimport Loader from \"../../components/common/Loader\";\nimport config from \"../../config\";\nimport { useStyles } from \"./reportsView.styles\";\nconst viewQuery = { pdf: \"stream\" };\n\nexport default function ReportsView() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const isMobile = useMobile();\n  const { report } = qs.parse(location.search);\n  const [params, setParams] = useState();\n  const [iframeSrc, setIframeSrc] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const hideLoader = useCallback(() => {\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    const {\n      \"bank-id\": bankId,\n      \"sr-id\": srId,\n      \"mtm-data\": mtmData,\n      \"mtm-combined\": mtmCombined,\n      \"report-name\": reportName,\n    } = qs.parse(location.search);\n    setParams({\n      bankId,\n      srId,\n      mtmData,\n      mtmCombined,\n      reportName: `${reportName}.pdf`,\n    });\n  }, [location.search]);\n\n  useEffect(() => {\n    if (!params) return;\n    async function getUrl() {\n      const src =\n        typeof reportsData[report] === \"function\"\n          ? `${config.BASE_URL}${reportsData[report](params).url}?${\n              reportsData[report](params).query\n            }`\n          : undefined;\n      if (src) {\n        const signedResponse = await ajax({\n          url: `${src}&getSignedUrl=1`,\n          applyAuthHeader: true,\n        });\n        const url = signedResponse?.data?.url;\n        setIframeSrc(url);\n      }\n    }\n    getUrl();\n  }, [params, report]);\n\n  const goBack = useCallback(() => {\n    Navigation.go(\"/reports\");\n  }, []);\n\n  const handleDownload = useCallback(() => {\n    dispatch(reportsData[report](params).downloadFunc());\n  }, [dispatch, params, report]);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.actionsContainer}>\n        {isMobile ? (\n          <IconButton onClick={goBack}>\n            <ArrowBackIcon />\n          </IconButton>\n        ) : (\n          <Button\n            className={classes.button}\n            startIcon={<ArrowBackIcon />}\n            onClick={goBack}\n          >\n            Back\n          </Button>\n        )}\n        {isMobile ? (\n          <IconButton onClick={handleDownload}>\n            {window && window.canShareUrl ? <ShareIcon /> : <DownloadIcon />}\n          </IconButton>\n        ) : (\n          <Button\n            className={classes.button}\n            startIcon={<DownloadIcon />}\n            onClick={handleDownload}\n          >\n            Download\n          </Button>\n        )}\n      </div>\n      {!!iframeSrc && (\n        <iframe\n          style={{ height: \"100%\", width: \"100%\" }}\n          src={`/pdf/web/viewer.html?file=${encodeURIComponent(iframeSrc)}`}\n          title=\"title\"\n          onLoad={hideLoader}\n        />\n      )}\n      {loading && <Loader />}\n    </div>\n  );\n}\n\nconst reportsData = {\n  \"all-in-one\": () => ({\n    url: \"reports/all-in-one\",\n    downloadFunc: getAllInOneReport,\n    query: qs.stringify(viewQuery),\n  }),\n  \"bank-pipeline\": (params) => {\n    if (!params) return \"\";\n    const { bankId } = params;\n    return {\n      url: \"reports/bank-pipeline\",\n      downloadFunc: () => getBankPipelineReport(bankId),\n      query: qs.stringify({ ...viewQuery, bank_id: bankId }),\n    };\n  },\n  \"custom-report\": (params) => {\n    if (!params) return \"\";\n    const { srId, reportName } = params;\n    return {\n      url: \"get-report\",\n      downloadFunc: () => getReportPDF(srId, reportName),\n      query: qs.stringify({ ...viewQuery, sr_id: srId }),\n    };\n  },\n  mtm: (params) => {\n    if (!params) return \"\";\n    const { mtmData, mtmCombined } = params;\n    return {\n      url: \"reports/mtm-burn-down\",\n      downloadFunc: () => getMTMReport(mtmData, mtmCombined),\n      query: qs.stringify(getMTMQuery(mtmData, mtmCombined)),\n    };\n  },\n  \"full-mtm\": () => ({\n    url: \"reports/mtm\",\n    downloadFunc: getFullBlownMTMReport,\n    query: qs.stringify(viewQuery),\n  }),\n};\n\nfunction getMTMQuery(members, combined) {\n  let membersArray = [];\n  if (members) {\n    typeof members === \"number\" || typeof members === \"string\"\n      ? (membersArray[0] = members)\n      : (membersArray = members);\n  }\n\n  const queryData = { ...viewQuery };\n  if (membersArray.length) {\n    membersArray.map((m, index) => (queryData[`members[${index}]`] = m));\n  }\n  if (parseInt(combined) >= 0) {\n    queryData[\"combined\"] = combined;\n  }\n  return queryData;\n}\n"],"sourceRoot":""}
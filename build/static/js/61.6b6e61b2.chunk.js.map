{"version":3,"sources":["components/contacts/SearchContacts.js"],"names":["SearchContacts","props","selectPredictiveContact","bind","window","scrollTo","contactId","date","this","contactActions","updateDate","note","updateNote","localStorage","getItem","item","searchWords","match","URLname","forEach","elem","i","length","Navigation","go","counter","contacts","getParameterByName","suggestions","map","className","key","onClick","alt","id","src","React","Component","connect","state","dispatch","bindActionCreators"],"mappings":"oPASMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,wBAA0B,EAAKA,wBAAwBC,KAA7B,gBAFd,E,gEAMjBC,OAAOC,SAAS,EAAG,K,iCAGVC,EAAWC,GACpBC,KAAKP,MAAMQ,eAAeC,WAAWJ,EAAWC,K,iCAGvCD,EAAWK,GACpBH,KAAKP,MAAMQ,eAAeG,WACxBN,EACAK,EACAE,aAAaC,QAAQ,iB,8CAIDC,GACtB,IAAIC,EAAcD,EAAKE,MAAM,QACzBC,EAAU,GACdF,EAAYG,SAAQ,SAACC,EAAMC,GACrBL,EAAYM,OAAS,IAAMD,EAC7BH,GAAWE,EAEXF,GAAWE,EAAO,OAGtBG,IAAWC,GAAX,2BAAkCN,M,+BAG1B,IAAD,OACHO,EAAU,EACRC,EAC2B,UAA/BC,YAAmB,SACnBnB,KAAKP,MAAMyB,SAASE,aACpBpB,KAAKP,MAAMyB,SAASE,YAAYC,KAAI,SAACd,GAAD,OAClC,yBACEe,UAAU,oBACVC,IAAKN,IACLO,QAAS,EAAK9B,wBAAwBC,KAAK,KAAMY,IAEjD,yBACEkB,IAAI,oBACJC,GAAG,oBACHC,IAAI,8BAELpB,EACD,kBAAC,IAAD,CAASe,UAAU,6BAGzB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAKA,UAAU,+BAA+BJ,S,GA1D3BU,IAAMC,WA6EpBC,uBAZf,SAAyBC,GACvB,MAAO,CACLb,SAAUa,EAAMb,aAIpB,SAA4Bc,GAC1B,MAAO,CACL/B,eAAgBgC,YAAmBhC,EAAgB+B,MAIxCF,CAA6CtC","file":"static/js/61.6b6e61b2.chunk.js","sourcesContent":["import React from \"react\";\nimport Row from \"muicss/lib/react/row\";\nimport { connect } from \"react-redux\";\nimport * as contactActions from \"../../actions/contactsActions\";\nimport { bindActionCreators } from \"redux\";\nimport { Navigation } from \"../../lib\";\nimport Divider from \"muicss/lib/react/divider\";\nimport getParameterByName from \"../common/getParameterByName\";\n\nclass SearchContacts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectPredictiveContact = this.selectPredictiveContact.bind(this);\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  changeDate(contactId, date) {\n    this.props.contactActions.updateDate(contactId, date);\n  }\n\n  updateNote(contactId, note) {\n    this.props.contactActions.updateNote(\n      contactId,\n      note,\n      localStorage.getItem(\"auth_token\")\n    );\n  }\n\n  selectPredictiveContact(item) {\n    let searchWords = item.match(/\\w+/g);\n    let URLname = \"\";\n    searchWords.forEach((elem, i) => {\n      if (searchWords.length - 1 === i) {\n        URLname += elem;\n      } else {\n        URLname += elem + \"+\";\n      }\n    });\n    Navigation.go(`/contacts/search/${URLname}`);\n  }\n\n  render() {\n    var counter = 0;\n    const contacts =\n      getParameterByName(\"type\") !== \"phone\" &&\n      this.props.contacts.suggestions &&\n      this.props.contacts.suggestions.map((item) => (\n        <div\n          className=\"predictive-search\"\n          key={counter++}\n          onClick={this.selectPredictiveContact.bind(null, item)}\n        >\n          <img\n            alt=\"search-icon-small\"\n            id=\"search-icon-small\"\n            src=\"/images/icons/search2.png\"\n          />\n          {item}\n          <Divider className=\"open-contact-divider\" />\n        </div>\n      ));\n    return (\n      <Row>\n        <div>\n          <Row className=\"predictive-search-container\">{contacts}</Row>\n        </div>\n      </Row>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    contacts: state.contacts,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    contactActions: bindActionCreators(contactActions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchContacts);\n"],"sourceRoot":""}